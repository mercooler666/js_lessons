"use strict"
// const category = 'toys';

// console,log(`https://someurl.com/${category}/5`); //формируем путь куда будет идти запрос/или ссылкаться пользователь//

// const user = "Ivan";
// alert(`Привет, ${user}`) // используем "`" вместо "'или"""

// console.log('arr' + "- object"); // arr- object (строка)// "+" оператор сложения
// console.log(4 + +"- object"); //NaN - Not a Number// 4 - число оператор + и (+"обьект")число
// console.log(4 + +"5"); //9 // мы интерполировали строку "5" в число оператором"+" - унарный плюс
//инкримент и дикримент - они служат для укорочения/удлинения кода
//пример//
//let incr = 10,
    // decr = 10; // после incr нет ; ибо мы можем перечислять переменные, котрые обьявляем, вместо того чтоб писать let постоянно
 
//  incr++;//используем оператор инкримента увеличиваем значение на 1
//  decr--;//используем оператор дeкримента увеличиваем значение на 1

// console.log(incr);// 11 //ибо оператор инкримента++1 
// console.log(decr);// 9 //оператор инкримента --1
//инкрименты можно ставить перед значением '++incr' - префиксная
//если ставить после 'incr++' - постфиксная 

// console.log(2*4 == 8);// true // когда мы используем "=" - присваивание "==" знак сравнения
// console.log(2*4 == '8');//true // 8 записана строкой, мы сравниванием по значению
//console.log(2*4 === '8');// false// строгое сравнение 
// оператор "и" пишем && работает когда два из вариантов правдив
// оператор "или" ||

// const isChecked = true,
//       isClose = true;
// console.log(isChecked && isClose); //true//ибо оба выражения верны     
//const isChecked = true,
//      isClose = false;
//console.log(isChecked || isClose); // true

//const isChecked = false,
//      isClose = false;
//console.log(isChecked || isClose);//false
//"!" - оператор отрицания, ложь-правда и правду-ложь
//const isChecked = false,
//      isClose = false;
//console.log(isChecked || !isClose); // true //потомучто одно значение поменяли оператором !

//console.log(2 + 2 * 2 === 8);// false // пример мат уровнения

